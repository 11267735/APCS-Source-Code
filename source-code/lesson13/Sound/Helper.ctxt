#BlueJ class context
comment0.params=
comment0.target=Helper()
comment1.params=file
comment1.target=Helper(java.io.File)
comment10.params=viewer
comment10.target=void\ setViewer(Viewer)
comment10.text=\n\ Need\ a\ reference\ to\ the\ viewer.\ Viewer\ listens\ to\ sound\ data\ line\ events\n\ such\ as\ opening\ and\ closing\ of\ a\ line.\n
comment11.params=
comment11.target=void\ refresh()
comment11.text=\n\ Calling\ this\ method\ will\ update\ the\ byte\ array\ buffer\ with\ the\ content\n\ of\ the\ int\ arraylist.\ The\ int\ arraylist\ is\ open\ to\ the\ world\ \n\ for\ modification\ whereas\ the\ byte\ array\ is\ internal\ to\ the\ Helper\ instance,\ \n\ so\ they\ may\ be\ out\ of\ sync\ through\ external\ edits\ to\ the\ sound.\n\ The\ byte\ array\ must\ be\ resynched\ before\ calling\ play\ or\ saving\ the\ content\ to\ file.\ \n\ Those\ methods\ assume\ the\ byte\ array\ is\ up\ to\ date.\n
comment12.params=
comment12.target=javax.sound.sampled.AudioInputStream\ createAudioInputStream()
comment12.text=\n\ Creates\ a\ new\ audio\ stream\ for\ playing\ to\ writing\ to\ disk\n
comment13.params=outFileName
comment13.target=void\ writeToFile(java.lang.String)
comment13.text=\n\ Write\ the\ byte\ array\ buffer\ to\ disk\n
comment14.params=
comment14.target=void\ play()
comment14.text=\n\ Play\ the\ sound.\ This\ maybe\ called\ to\ play\ a\ sound\ from\ a\ beginning\n\ or\ from\ somewhere\ in\ the\ middle\ from\ a\ previous\ invocation\ of\ play()\n\ followed\ by\ pause().\n
comment15.params=
comment15.target=void\ stop()
comment15.text=\n\ Stop\ playing.\ The\ audio\ may\ be\ playing\ or\ paused.\n
comment16.params=
comment16.target=void\ pause()
comment16.text=\n\ Pause\ playing\n
comment17.params=startFrame\ endFrame
comment17.target=void\ playInRange(int,\ int)
comment17.text=\n\ Called\ to\ play\ a\ selected\ range\ of\ the\ audio.\ \n
comment18.params=
comment18.target=boolean\ isPlaying()
comment18.text=\n\ Determines\ if\ there\ is\ an\ active\ playback\ associated\ with\ the\ sound.\n
comment19.params=e
comment19.target=void\ update(javax.sound.sampled.LineEvent)
comment19.text=\n\ Listens\ for\ Line\ CLOSE\ event\n\ @see\ javax.sound.sampled.LineListener\#update(javax.sound.sampled.LineEvent)\n
comment2.params=numFrames
comment2.target=Helper(int)
comment20.params=
comment20.target=void\ setData()
comment20.text=\n\ Converts\ the\ data\ as\ a\ byte\ array\ into\ an\ integer\ array\n\ for\ ease\ of\ manipulation.\n
comment21.params=frameNum
comment21.target=byte[]\ getFrame(int)
comment21.text=\n\ Returns\ the\ data\ at\ the\ given\ frame\ as\ a\ byte\ array\n
comment22.params=frameNum\ theFrame
comment22.target=void\ setFrame(int,\ byte[])
comment22.text=\n\ Sets\ the\ data\ at\ the\ given\ frame\ number\ with\ the\ data\n\ in\ the\ byte\ array\n
comment23.params=frameNum\ sample
comment23.target=void\ setSampleValue(int,\ int)
comment23.text=\n\ Sets\ the\ data\ at\ the\ given\ frame\ number\ with\ the\ \n\ int\ sample\n
comment24.params=frameNum
comment24.target=int\ getSampleValue(int)
comment24.text=\n\ Returns\ the\ sample\ at\ the\ input\ frame\ number\ as\ an\ int\n
comment25.params=frameNum
comment25.target=void\ checkFrameNum(int)
comment25.text=\n\ Check\ the\ frame\ number\ is\ in\ range.\n
comment26.params=sample\ theFrame
comment26.target=void\ sampleToFrame(int,\ byte[])
comment26.text=\n\ Converts\ a\ sample\ in\ int\ to\ byte\ array\n
comment27.params=theFrame
comment27.target=int\ frameToSample(byte[])
comment27.text=\ \n\ Converts\ a\ byte\ array\ to\ an\ int\ sample\n
comment3.params=sound
comment3.target=Helper(Helper)
comment4.params=buffer\ audioFileFormat
comment4.target=Helper(byte[],\ javax.sound.sampled.AudioFileFormat)
comment5.params=
comment5.target=java.util.ArrayList\ getData()
comment5.text=\n\ Returns\ the\ content\ of\ the\ sound\ as\ an\ Integer\ arraylist.\n
comment6.params=data
comment6.target=void\ setData(java.util.ArrayList)
comment6.text=\n\ Sets\ a\ new\ ArrayList<integer>\ as\ the\ data\ source,\ keeping\ original\ audioformat\ (samplerate,\ etc)\n
comment7.params=
comment7.target=double\ getSamplingRate()
comment7.text=\n\ Returns\ the\ converted\ sampling\ rate.\ This\ may\ be\ different\ to\ the\ sampling\n\ rate\ of\ the\ original\ file\n
comment8.params=
comment8.target=int\ getBitsPerSample()
comment9.params=
comment9.target=float\ getMaxSampleValue()
comment9.text=\n\ Returns\ the\ maximum\ value\ of\ the\ samples\ encoded\ in\ this\ sound.\n\ TODO\:\ really,\ this\ should\ just\ be\ 16\ for\ this\ curriculum.\ \ The\ students\ don't\ know\ to\ work\n\ with\ different\ sizes\!\n
numComments=28
